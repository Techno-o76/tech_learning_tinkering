// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: proto/helloworld.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HelloWorldClient is the client API for HelloWorld service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HelloWorldClient interface {
	// simple RPC
	Hello(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (*HelloResponse, error)
	// server stream rpc
	HelloServerStreaming(ctx context.Context, in *NamesList, opts ...grpc.CallOption) (HelloWorld_HelloServerStreamingClient, error)
	// client streaming RPC
	HelloClientStreaming(ctx context.Context, opts ...grpc.CallOption) (HelloWorld_HelloClientStreamingClient, error)
	// bidirectional streaming RPC
	HelloBidirectionalStreaming(ctx context.Context, opts ...grpc.CallOption) (HelloWorld_HelloBidirectionalStreamingClient, error)
}

type helloWorldClient struct {
	cc grpc.ClientConnInterface
}

func NewHelloWorldClient(cc grpc.ClientConnInterface) HelloWorldClient {
	return &helloWorldClient{cc}
}

func (c *helloWorldClient) Hello(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, "/helloworld.HelloWorld/Hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloWorldClient) HelloServerStreaming(ctx context.Context, in *NamesList, opts ...grpc.CallOption) (HelloWorld_HelloServerStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &HelloWorld_ServiceDesc.Streams[0], "/helloworld.HelloWorld/HelloServerStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloWorldHelloServerStreamingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HelloWorld_HelloServerStreamingClient interface {
	Recv() (*HelloResponse, error)
	grpc.ClientStream
}

type helloWorldHelloServerStreamingClient struct {
	grpc.ClientStream
}

func (x *helloWorldHelloServerStreamingClient) Recv() (*HelloResponse, error) {
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloWorldClient) HelloClientStreaming(ctx context.Context, opts ...grpc.CallOption) (HelloWorld_HelloClientStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &HelloWorld_ServiceDesc.Streams[1], "/helloworld.HelloWorld/HelloClientStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloWorldHelloClientStreamingClient{stream}
	return x, nil
}

type HelloWorld_HelloClientStreamingClient interface {
	Send(*HelloRequest) error
	CloseAndRecv() (*MessagesList, error)
	grpc.ClientStream
}

type helloWorldHelloClientStreamingClient struct {
	grpc.ClientStream
}

func (x *helloWorldHelloClientStreamingClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloWorldHelloClientStreamingClient) CloseAndRecv() (*MessagesList, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(MessagesList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloWorldClient) HelloBidirectionalStreaming(ctx context.Context, opts ...grpc.CallOption) (HelloWorld_HelloBidirectionalStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &HelloWorld_ServiceDesc.Streams[2], "/helloworld.HelloWorld/HelloBidirectionalStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloWorldHelloBidirectionalStreamingClient{stream}
	return x, nil
}

type HelloWorld_HelloBidirectionalStreamingClient interface {
	Send(*HelloRequest) error
	Recv() (*HelloResponse, error)
	grpc.ClientStream
}

type helloWorldHelloBidirectionalStreamingClient struct {
	grpc.ClientStream
}

func (x *helloWorldHelloBidirectionalStreamingClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloWorldHelloBidirectionalStreamingClient) Recv() (*HelloResponse, error) {
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HelloWorldServer is the server API for HelloWorld service.
// All implementations must embed UnimplementedHelloWorldServer
// for forward compatibility
type HelloWorldServer interface {
	// simple RPC
	Hello(context.Context, *NoParam) (*HelloResponse, error)
	// server stream rpc
	HelloServerStreaming(*NamesList, HelloWorld_HelloServerStreamingServer) error
	// client streaming RPC
	HelloClientStreaming(HelloWorld_HelloClientStreamingServer) error
	// bidirectional streaming RPC
	HelloBidirectionalStreaming(HelloWorld_HelloBidirectionalStreamingServer) error
	mustEmbedUnimplementedHelloWorldServer()
}

// UnimplementedHelloWorldServer must be embedded to have forward compatible implementations.
type UnimplementedHelloWorldServer struct {
}

func (UnimplementedHelloWorldServer) Hello(context.Context, *NoParam) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedHelloWorldServer) HelloServerStreaming(*NamesList, HelloWorld_HelloServerStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method HelloServerStreaming not implemented")
}
func (UnimplementedHelloWorldServer) HelloClientStreaming(HelloWorld_HelloClientStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method HelloClientStreaming not implemented")
}
func (UnimplementedHelloWorldServer) HelloBidirectionalStreaming(HelloWorld_HelloBidirectionalStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method HelloBidirectionalStreaming not implemented")
}
func (UnimplementedHelloWorldServer) mustEmbedUnimplementedHelloWorldServer() {}

// UnsafeHelloWorldServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HelloWorldServer will
// result in compilation errors.
type UnsafeHelloWorldServer interface {
	mustEmbedUnimplementedHelloWorldServer()
}

func RegisterHelloWorldServer(s grpc.ServiceRegistrar, srv HelloWorldServer) {
	s.RegisterService(&HelloWorld_ServiceDesc, srv)
}

func _HelloWorld_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloWorldServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.HelloWorld/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloWorldServer).Hello(ctx, req.(*NoParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelloWorld_HelloServerStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NamesList)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HelloWorldServer).HelloServerStreaming(m, &helloWorldHelloServerStreamingServer{stream})
}

type HelloWorld_HelloServerStreamingServer interface {
	Send(*HelloResponse) error
	grpc.ServerStream
}

type helloWorldHelloServerStreamingServer struct {
	grpc.ServerStream
}

func (x *helloWorldHelloServerStreamingServer) Send(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _HelloWorld_HelloClientStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloWorldServer).HelloClientStreaming(&helloWorldHelloClientStreamingServer{stream})
}

type HelloWorld_HelloClientStreamingServer interface {
	SendAndClose(*MessagesList) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type helloWorldHelloClientStreamingServer struct {
	grpc.ServerStream
}

func (x *helloWorldHelloClientStreamingServer) SendAndClose(m *MessagesList) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloWorldHelloClientStreamingServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _HelloWorld_HelloBidirectionalStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloWorldServer).HelloBidirectionalStreaming(&helloWorldHelloBidirectionalStreamingServer{stream})
}

type HelloWorld_HelloBidirectionalStreamingServer interface {
	Send(*HelloResponse) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type helloWorldHelloBidirectionalStreamingServer struct {
	grpc.ServerStream
}

func (x *helloWorldHelloBidirectionalStreamingServer) Send(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloWorldHelloBidirectionalStreamingServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HelloWorld_ServiceDesc is the grpc.ServiceDesc for HelloWorld service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HelloWorld_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.HelloWorld",
	HandlerType: (*HelloWorldServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _HelloWorld_Hello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HelloServerStreaming",
			Handler:       _HelloWorld_HelloServerStreaming_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "HelloClientStreaming",
			Handler:       _HelloWorld_HelloClientStreaming_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "HelloBidirectionalStreaming",
			Handler:       _HelloWorld_HelloBidirectionalStreaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/helloworld.proto",
}
